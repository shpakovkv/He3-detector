#!/usr/bin/env python
# coding: utf-8

"""This script is intended to convert raw He3 detector files (generated by
He3 readout system) to simple text csv files with ASCii data.

Simple usage:
python k15reader.py input_file_name > output_file_name


Author: Konstantin Shpakov, march 2021.
"""

import re
import numpy as np
import datetime


def get_raw_lines(filename):
    lines = None
    with open(filename, 'r') as fid:
        lines = fid.readlines()
    return lines


def get_col_num(raw_line):
    pattern = '([^\s]+)'
    cols = re.findall(pattern, raw_line)

    # -1 because date and time are separated
    return len(cols) - 1


def get_date(raw_line):
    date_separator = '.'
    date_pattern = '(\d+[\.][\d\.:]+)'

    date = re.findall(date_pattern, raw_line)
    assert len(date) > 0, "No date stamp found in line '{}'".format(raw_line)
    assert len(date) < 2, "Too many date stamp found in line '{}'".format(raw_line)
    date = date[0]
    day, month, year = (int(word) for word in date.split(date_separator))
    return day, month, year


def get_time(raw_line):
    time_separator = ':'
    time_pattern = '(\d+[:][\d\.:]+)'

    time = re.findall(time_pattern, raw_line)
    assert len(time) > 0, "No time stamp found in line '{}'".format(raw_line)
    assert len(time) < 2, "Too many time stamp found in line '{}'".format(raw_line)
    time = time[0]
    hour, min, sec = (int(word) for word in time.split(time_separator))
    return hour, min, sec


def get_time_stamp(raw_line):
    day, month, year = get_date(raw_line)
    hour, min, sec = get_time(raw_line)
    date_and_time = datetime.datetime(year, month, day, hour, min, sec, tzinfo=None)
    return date_and_time.timestamp()


def get_tail_w_counts(raw_line):
    pattern = '(\s[\d\s]+)$'
    match = re.search(pattern, raw_line)
    line_tail = match.group(0).strip()
    return line_tail


def get_signals_data(raw_lines):
    rows = get_col_num(raw_lines[0])
    points = len(raw_lines)
    data = np.ndarray(shape=(rows, points), dtype=np.int64)
    for point, raw_line in enumerate(raw_lines):
        timestamp = get_time_stamp(raw_line)
        data[0, point] = timestamp
        line_tail = get_tail_w_counts(raw_line)
        for row, val in enumerate(int(word) for word in line_tail.split()):
            # keep first row for timestamp
            data[row + 1, point] = val
    return data


def test():
    filename = "Cf252-12-03-2021"
    raw_lines = get_raw_lines(filename)
    data_array = get_signals_data(raw_lines)
    delimiter = ','
    for idx in range(data_array.shape[1]):
        print(delimiter.join(str(val) for val in data_array[:, idx]))


def main():
    """Reads input He3-data file and outputs (print) x,y data line by line
    Usage: python k15reader.py input_file_name > output_file_name

    :return: None
    """
    import sys
    import os

    delimiter = ','

    # check inputs
    assert len(sys.argv) > 1, "Please specify file path/name."
    assert len(sys.argv) < 3, "Too many input parameters."

    if sys.argv[1] == "-h" or sys.argv[1] == "--help":
        print("Usage: python k15reader.py input_file_name > output_file_name\n")
        return

    assert os.path.isfile(sys.argv[1]), "No such file '{}'\n".format(os.path.abspath(sys.argv[1]))

    # read
    raw_lines = get_raw_lines(sys.argv[1])
    data = get_signals_data(raw_lines)

    # save
    # np.savetxt()
    for idx in range(data.shape[1]):
        print(delimiter.join(str(val) for val in data[:, idx]))


if __name__ == "__main__":
    # main()
    test()
